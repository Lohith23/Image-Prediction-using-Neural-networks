#importing necessary modules

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

#calling the data and necessary objects from the data

data = keras.datasets.mnist.load_data(path="mnist.npz")
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

#making necessary customisation to the data

Class_names = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
assert x_train.shape == (60000, 28, 28)
assert y_train.shape == (60000,)
assert x_test.shape == (10000, 28, 28)
assert y_test.shape == (10000,)

#defining layers

model = keras.Sequential([
        keras.layers.Flatten(input_shape=[28, 28]),
        keras.layers.Dense(128, activation="sigmoid"),
        keras.layers.Dense(10, activation="softmax")
        ])

#compiling and fitting

model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
model.fit(x_train, y_train, epochs=10)

#evaluating

test_loss, test_acc = model.evaluate(x_train, y_train)
print("TESTED LOSS:", test_loss)

#plotting
prediction = model.predict(x_test)

for i in range(9):
    plt.grid(False)
    plt.imshow(x_test[i], cmap=plt.cm.binary)
    plt.xlabel("Actual: " + Class_names[y_test[i]])
    plt.title("Prediction" + Class_names[np.argmax(prediction[i])])
    plt.show()
